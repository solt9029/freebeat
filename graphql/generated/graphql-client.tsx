import { gql } from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
};

/** Autogenerated input type of CreatePlaylist */
export type CreatePlaylistInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreatePlaylist */
export type CreatePlaylistPayload = {
  __typename?: 'CreatePlaylistPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  playlist: Playlist;
};

/** Autogenerated input type of CreateVideo */
export type CreateVideoInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  key: Scalars['String'];
  playlistId: Scalars['Int'];
  youtubeVideoId: Scalars['String'];
};

/** Autogenerated return type of CreateVideo */
export type CreateVideoPayload = {
  __typename?: 'CreateVideoPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  video: Video;
};

/** Autogenerated input type of CreateVideos */
export type CreateVideosInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  key: Scalars['String'];
  playlistId: Scalars['Int'];
  youtubePlaylistId: Scalars['String'];
};

/** Autogenerated return type of CreateVideos */
export type CreateVideosPayload = {
  __typename?: 'CreateVideosPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  videos: Array<Video>;
};


export type Mutation = {
  __typename?: 'Mutation';
  createPlaylist?: Maybe<CreatePlaylistPayload>;
  createVideo?: Maybe<CreateVideoPayload>;
  createVideos?: Maybe<CreateVideosPayload>;
  updatePlaylist?: Maybe<UpdatePlaylistPayload>;
  updateVideo?: Maybe<UpdateVideoPayload>;
};


export type MutationCreatePlaylistArgs = {
  input: CreatePlaylistInput;
};


export type MutationCreateVideoArgs = {
  input: CreateVideoInput;
};


export type MutationCreateVideosArgs = {
  input: CreateVideosInput;
};


export type MutationUpdatePlaylistArgs = {
  input: UpdatePlaylistInput;
};


export type MutationUpdateVideoArgs = {
  input: UpdateVideoInput;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

export type Playlist = {
  __typename?: 'Playlist';
  createdAt: Scalars['ISO8601DateTime'];
  defaultBpm: Scalars['Int'];
  id: Scalars['ID'];
  title: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
  videos: VideoConnection;
};


export type PlaylistVideosArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** The connection type for Playlist. */
export type PlaylistConnection = {
  __typename?: 'PlaylistConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PlaylistEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Playlist>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type PlaylistEdge = {
  __typename?: 'PlaylistEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Playlist>;
};

export type Query = {
  __typename?: 'Query';
  playlist: Playlist;
  playlists: PlaylistConnection;
};


export type QueryPlaylistArgs = {
  id: Scalars['Int'];
};


export type QueryPlaylistsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** Autogenerated input type of UpdatePlaylist */
export type UpdatePlaylistInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  defaultBpm?: Maybe<Scalars['Int']>;
  id: Scalars['Int'];
  key: Scalars['String'];
  title?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdatePlaylist */
export type UpdatePlaylistPayload = {
  __typename?: 'UpdatePlaylistPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  playlist: Playlist;
};

/** Autogenerated input type of UpdateVideo */
export type UpdateVideoInput = {
  bpm: Scalars['Int'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
  key: Scalars['String'];
};

/** Autogenerated return type of UpdateVideo */
export type UpdateVideoPayload = {
  __typename?: 'UpdateVideoPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  video: Video;
};

export type Video = {
  __typename?: 'Video';
  bpm?: Maybe<Scalars['Int']>;
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  playlist: Playlist;
  playlistId: Scalars['Int'];
  updatedAt: Scalars['ISO8601DateTime'];
  youtubeVideoId: Scalars['String'];
};

/** The connection type for Video. */
export type VideoConnection = {
  __typename?: 'VideoConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<VideoEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Video>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type VideoEdge = {
  __typename?: 'VideoEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Video>;
};
